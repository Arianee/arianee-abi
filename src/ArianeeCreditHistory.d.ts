/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ArianeeCreditHistory extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): ArianeeCreditHistory;
  methods: {
    balanceOf(_spender: string, _type: number | string): TransactionObject<BN>;

    userCreditHistory(
      _spender: string,
      _type: number | string,
      _index: number | string
    ): TransactionObject<{
      _price: BN;
      _quantity: BN;
      0: BN;
      1: BN;
    }>;

    userIndex(_spender: string, _type: number | string): TransactionObject<BN>;

    addCreditHistory(
      _spender: string,
      _price: number | string,
      _quantity: number | string,
      _type: number | string
    ): TransactionObject<void>;

    setArianeeStoreAddress(
      _newArianeeStoreAdress: string
    ): TransactionObject<void>;

    consumeCredits(
      _spender: string,
      _type: number | string,
      _quantity: number | string
    ): TransactionObject<BN>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    owner(): TransactionObject<string>;
    arianeeStoreAddress(): TransactionObject<string>;
  };
  events: {
    SetAddress: ContractEvent<{
      _addressType: string;
      _newAddress: string;
      0: string;
      1: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
