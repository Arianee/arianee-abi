/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ArianeeCreditHistory extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    balanceOf(
      _spender: string,
      _type: number | string
    ): TransactionObject<string>;

    userCreditHistory(
      _spender: string,
      _type: number | string,
      _index: number | string
    ): TransactionObject<{
      _price: string;
      _quantity: string;
      0: string;
      1: string;
    }>;

    userIndex(
      _spender: string,
      _type: number | string
    ): TransactionObject<string>;

    addCreditHistory(
      _spender: string,
      _price: number | string,
      _quantity: number | string,
      _type: number | string
    ): TransactionObject<void>;

    setArianeeStoreAddress(
      _newArianeeStoreAdress: string
    ): TransactionObject<void>;

    consumeCredits(
      _spender: string,
      _type: number | string,
      _quantity: number | string
    ): TransactionObject<string>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    owner(): TransactionObject<string>;
    arianeeStoreAddress(): TransactionObject<string>;
  };
  events: {
    SetAddress(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
