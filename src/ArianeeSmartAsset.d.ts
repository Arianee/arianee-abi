/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ArianeeSmartAsset extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    supportsInterface(
      _interfaceID: string | number[]
    ): TransactionObject<boolean>;

    isTokenValid(
      _tokenId: number | string,
      _hash: string | number[],
      _tokenType: number | string,
      _signature: (string | number[])[]
    ): TransactionObject<boolean>;

    getApproved(_tokenId: number | string): TransactionObject<string>;

    tokenOfOwnerByIndex(
      _owner: string,
      _index: number | string
    ): TransactionObject<string>;

    tokenByIndex(_index: number | string): TransactionObject<string>;

    tokenCreation(_tokenId: number | string): TransactionObject<string>;

    ownerOf(_tokenId: number | string): TransactionObject<string>;

    recoveryRequestOpen(_tokenId: number | string): TransactionObject<boolean>;

    isAble(
      _target: string,
      _ability: number | string
    ): TransactionObject<boolean>;

    balanceOf(_owner: string): TransactionObject<string>;

    tokenImprint(_tokenId: number | string): TransactionObject<string>;

    canOperate(
      _tokenId: number | string,
      _operator: string
    ): TransactionObject<boolean>;

    issuerOf(_tokenId: number | string): TransactionObject<string>;

    getRewards(_tokenId: number | string): TransactionObject<string>;

    tokenURI(_tokenId: number | string): TransactionObject<string>;

    tokenHashedAccess(
      _tokenId: number | string,
      _tokenType: number | string
    ): TransactionObject<string>;

    tokenRecoveryDate(_tokenId: number | string): TransactionObject<string>;

    isApprovedForAll(
      _owner: string,
      _operator: string
    ): TransactionObject<boolean>;

    isRequestable(_tokenId: number | string): TransactionObject<boolean>;

    approve(
      _approved: string,
      _tokenId: number | string
    ): TransactionObject<void>;

    validRecoveryRequest(_tokenId: number | string): TransactionObject<void>;

    updateTokenURI(
      _tokenId: number | string,
      _uri: string
    ): TransactionObject<void>;

    transferFrom(
      _from: string,
      _to: string,
      _tokenId: number | string
    ): TransactionObject<void>;

    reserveToken(
      _tokenId: number | string,
      _to: string,
      _rewards: number | string
    ): TransactionObject<void>;

    setUriBase(_newURIBase: string): TransactionObject<void>;

    unpause(): TransactionObject<void>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _tokenId: number | string
    ): TransactionObject<void>;

    setStoreAddress(_storeAddress: string): TransactionObject<void>;

    assignAbilities(
      _target: string,
      _abilities: (number | string)[]
    ): TransactionObject<void>;

    pause(): TransactionObject<void>;

    revokeAbilities(
      _target: string,
      _abilities: (number | string)[]
    ): TransactionObject<void>;

    setWhitelistAddress(_whitelistAddres: string): TransactionObject<void>;

    setApprovalForAll(
      _operator: string,
      _approved: boolean
    ): TransactionObject<void>;

    recoverTokenToIssuer(_tokenId: number | string): TransactionObject<void>;

    addTokenAccess(
      _tokenId: number | string,
      _key: string,
      _enable: boolean,
      _tokenType: number | string
    ): TransactionObject<void>;

    requestToken(
      _tokenId: number | string,
      _hash: string | number[],
      _keepRequestToken: boolean,
      _newOwner: string,
      _signature: (string | number[])[]
    ): TransactionObject<{
      reward: string;
      message: string;
      0: string;
      1: string;
    }>;

    hydrateToken(
      _tokenId: number | string,
      _imprint: string | number[],
      _uri: string,
      _initialKey: string,
      _tokenRecoveryTimestamp: number | string,
      _initialKeyIsRequestKey: boolean,
      _owner: string
    ): TransactionObject<string>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    updateRecoveryRequest(
      _tokenId: number | string,
      _active: boolean
    ): TransactionObject<void>;

    name(): TransactionObject<string>;
    totalSupply(): TransactionObject<string>;
    paused(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
    symbol(): TransactionObject<string>;
    uriBase(): TransactionObject<string>;
  };
  events: {
    SetAddress(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Hydrated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RecoveryRequestUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TokenRecovered(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TokenURIUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    tokenAccessAdded(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Pause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unpause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    AssignAbility(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RevokeAbility(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Transfer(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Approval(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ApprovalForAll(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
