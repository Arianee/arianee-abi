/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ArianeeStaking extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    getPersonalStakeUnlockedTimestamps(
      _address: string
    ): TransactionObject<(string)[]>;

    getPersonalStakes(
      _address: string
    ): TransactionObject<{
      0: (string)[];
      1: (string)[];
      2: (string)[];
    }>;

    totalStakedFor(_address: string): TransactionObject<string>;

    getPersonalStakeActualAmounts(
      _address: string
    ): TransactionObject<(string)[]>;

    getPersonalStakeForAddresses(
      _address: string
    ): TransactionObject<(string)[]>;

    stakeHolders(
      arg0: string
    ): TransactionObject<{
      totalStakedFor: string;
      personalStakeIndex: string;
      exists: boolean;
      0: string;
      1: string;
      2: boolean;
    }>;

    updateAriaUSDExchange(
      _newAriaUSDExchange: number | string
    ): TransactionObject<void>;

    stake(
      _amount: number | string,
      _data: (string | number[])[]
    ): TransactionObject<void>;

    stakeFor(
      _user: string,
      _amount: number | string,
      _data: (string | number[])[]
    ): TransactionObject<void>;

    updateFeesReceiver(_newFeesReceiver: string): TransactionObject<void>;

    updateMinimalUSDStakable(
      _newMinimalUSDStakable: number | string
    ): TransactionObject<void>;

    unlockStakeWithFee(
      _staker: string,
      _percentUnstake: number | string
    ): TransactionObject<void>;

    unstake(
      _amount: number | string,
      _data: (string | number[])[]
    ): TransactionObject<void>;

    stakeWithMinimal(
      _amount: number | string,
      _data: (string | number[])[]
    ): TransactionObject<void>;

    ariaUSDExchange(): TransactionObject<string>;
    supportsHistory(): TransactionObject<boolean>;
    totalStaked(): TransactionObject<string>;
    feesReceiver(): TransactionObject<string>;
    minimalUSDStakable(): TransactionObject<string>;
    defaultLockInDuration(): TransactionObject<string>;
    token(): TransactionObject<string>;
  };
  events: {
    newStake(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Staked(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unstaked(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
