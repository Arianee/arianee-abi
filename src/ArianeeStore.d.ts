/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ArianeeStore extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  options:any;
  methods: {
    percentOfDispatch(_receiver: number | string): TransactionObject<string>;

    canDestroy(
      _tokenId: number | string,
      _sender: string
    ): TransactionObject<boolean>;

    creditPriceUSD(_creditType: number | string): TransactionObject<string>;

    canTransfer(
      _to: string,
      _from: string,
      _tokenId: number | string
    ): TransactionObject<boolean>;

    getCreditPrice(_creditType: number | string): TransactionObject<string>;

    buyCredit(
      _creditType: number | string,
      _quantity: number | string,
      _to: string
    ): TransactionObject<void>;

    setAriaUSDExchange(
      _ariaUSDExchange: number | string
    ): TransactionObject<void>;

    getAriaFromOldStore(_oldStoreAddress: string): TransactionObject<void>;

    reserveToken(_id: number | string, _to: string): TransactionObject<void>;

    setAuthorizedExchangeAddress(
      _authorizedExchangeAddress: string
    ): TransactionObject<void>;

    unpause(): TransactionObject<void>;

    setDispatchPercent(
      _percentInfra: number | string,
      _percentBrandsProvider: number | string,
      _percentOwnerProvider: number | string,
      _arianeeProject: number | string,
      _assetHolder: number | string
    ): TransactionObject<void>;

    setArianeeProjectAddress(
      _arianeeProjectAddress: string
    ): TransactionObject<void>;

    withdrawArias(): TransactionObject<void>;

    pause(): TransactionObject<void>;

    setProtocolInfraAddress(
      _protocolInfraAddress: string
    ): TransactionObject<void>;

    requestToken(
      _tokenId: number | string,
      _hash: string | number[],
      _keepRequestToken: boolean,
      _providerOwner: string,
      _signature: (string | number[])[]
    ): TransactionObject<void>;

    hydrateToken(
      _tokenId: number | string,
      _imprint: string | number[],
      _uri: string,
      _encryptedInitialKey: string,
      _tokenRecoveryTimestamp: number | string,
      _initialKeyIsRequestKey: boolean,
      _providerBrand: string
    ): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    setCreditPrice(
      _creditType: number | string,
      _price: number | string
    ): TransactionObject<void>;

    nonFungibleRegistry(): TransactionObject<string>;
    creditHistory(): TransactionObject<string>;
    ariaUSDExchange(): TransactionObject<string>;
    acceptedToken(): TransactionObject<string>;
    paused(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
  };
  events: {
    SetAddress(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    NewCreditPrice(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    NewAriaUSDExchange(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    CreditBuyed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    NewDispatchPercent(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    CreditSpended(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Pause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unpause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
