/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractOptions, Options } from "web3-eth-contract";
import { Block } from "web3-eth";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { Callback, TransactionObject } from "./types";

export class ArianeeEvent extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  methods: {
    idToPendingEvents(arg0: number | string): TransactionObject<string>;

    tokenEventsList(
      arg0: number | string,
      arg1: number | string
    ): TransactionObject<string>;

    events(
      arg0: number | string
    ): TransactionObject<{
      URI: string;
      imprint: string;
      provider: string;
      destroyLimitTimestamp: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    pendingEventsLength(arg0: number | string): TransactionObject<string>;

    eventIdToToken(arg0: number | string): TransactionObject<string>;

    idToTokenEventIndex(arg0: number | string): TransactionObject<string>;

    pendingEvents(
      arg0: number | string,
      arg1: number | string
    ): TransactionObject<string>;

    rewards(arg0: number | string): TransactionObject<string>;

    unpause(): TransactionObject<void>;

    updateDestroyRequest(
      _eventId: number | string,
      _active: boolean
    ): TransactionObject<void>;

    accept(
      _eventId: number | string,
      _sender: string
    ): TransactionObject<string>;

    setStoreAddress(_storeAddress: string): TransactionObject<void>;

    pause(): TransactionObject<void>;

    destroy(_eventId: number | string): TransactionObject<void>;

    create(
      _tokenId: number | string,
      _imprint: string | number[],
      _uri: string,
      _reward: number | string,
      _provider: string
    ): TransactionObject<string>;

    validDestroyRequest(_eventId: number | string): TransactionObject<void>;

    refuse(
      _eventId: number | string,
      _sender: string
    ): TransactionObject<string>;

    updateEventDestroyDelay(
      _newDelay: number | string
    ): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    paused(): TransactionObject<boolean>;
    owner(): TransactionObject<string>;
  };
  events: {
    EventCreated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    EventAccepted(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    EventRefused(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    EventDestroyed(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    DestroyRequestUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    EventDestroyDelayUpdated(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Pause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    Unpause(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: number | string;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
