/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import * as BN from "../@types/bn";
import Contract, { contractOptions } from "../@types/web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "../@types/web3/types";
import { TransactionObject, BlockType } from "../@types/web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ArianeeStaking extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): ArianeeStaking;
  methods: {
    getPersonalStakeUnlockedTimestamps(
      _address: string
    ): TransactionObject<(BN)[]>;

    getPersonalStakes(
      _address: string
    ): TransactionObject<{
      0: (BN)[];
      1: (BN)[];
      2: (string)[];
    }>;

    totalStakedFor(_address: string): TransactionObject<BN>;

    getPersonalStakeActualAmounts(_address: string): TransactionObject<(BN)[]>;

    getPersonalStakeForAddresses(
      _address: string
    ): TransactionObject<(string)[]>;

    stakeHolders(
      arg0: string
    ): TransactionObject<{
      totalStakedFor: BN;
      personalStakeIndex: BN;
      exists: boolean;
      0: BN;
      1: BN;
      2: boolean;
    }>;

    updateAriaUSDExchange(
      _newAriaUSDExchange: number | string
    ): TransactionObject<void>;

    stake(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    stakeFor(
      _user: string,
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    updateFeesReceiver(_newFeesReceiver: string): TransactionObject<void>;

    updateMinimalUSDStakable(
      _newMinimalUSDStakable: number | string
    ): TransactionObject<void>;

    unlockStakeWithFee(
      _staker: string,
      _percentUnstake: number | string
    ): TransactionObject<void>;

    unstake(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    stakeWithMinimal(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    ariaUSDExchange(): TransactionObject<BN>;
    supportsHistory(): TransactionObject<boolean>;
    totalStaked(): TransactionObject<BN>;
    feesReceiver(): TransactionObject<string>;
    minimalUSDStakable(): TransactionObject<BN>;
    defaultLockInDuration(): TransactionObject<BN>;
    token(): TransactionObject<string>;
  };
  events: {
    newStake: ContractEvent<{
      _amount: BN;
      staker: string;
      0: BN;
      1: string;
    }>;
    Staked: ContractEvent<{
      user: string;
      amount: BN;
      total: BN;
      data: string;
      0: string;
      1: BN;
      2: BN;
      3: string;
    }>;
    Unstaked: ContractEvent<{
      user: string;
      amount: BN;
      total: BN;
      data: string;
      0: string;
      1: BN;
      2: BN;
      3: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
