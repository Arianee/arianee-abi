/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ArianeeWhitelist extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): ArianeeWhitelist;
  methods: {
    isBlacklisted(
      _owner: string,
      _sender: string,
      _tokenId: number | string
    ): TransactionObject<boolean>;

    addressToAbility(arg0: string): TransactionObject<BN>;

    isAuthorized(
      _tokenId: number | string,
      _sender: string,
      _tokenOwner: string
    ): TransactionObject<boolean>;

    isWhitelisted(
      _tokenId: number | string,
      _address: string
    ): TransactionObject<boolean>;

    isAble(
      _target: string,
      _abilities: number | string
    ): TransactionObject<boolean>;

    grantAbilities(
      _target: string,
      _abilities: number | string
    ): TransactionObject<void>;

    addWhitelistedAddress(
      _tokenId: number | string,
      _address: string
    ): TransactionObject<void>;

    revokeAbilities(
      _target: string,
      _abilities: number | string,
      _allowSuperRevoke: boolean
    ): TransactionObject<void>;

    addBlacklistedAddress(
      _sender: string,
      _tokenId: number | string,
      _activate: boolean
    ): TransactionObject<void>;
  };
  events: {
    WhitelistedAddressAdded: ContractEvent<{
      _tokenId: BN;
      _address: string;
      0: BN;
      1: string;
    }>;
    BlacklistedAddresAdded: ContractEvent<{
      _sender: string;
      _tokenId: BN;
      _activate: boolean;
      0: string;
      1: BN;
      2: boolean;
    }>;
    GrantAbilities: ContractEvent<{
      _target: string;
      _abilities: BN;
      0: string;
      1: BN;
    }>;
    RevokeAbilities: ContractEvent<{
      _target: string;
      _abilities: BN;
      0: string;
      1: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
