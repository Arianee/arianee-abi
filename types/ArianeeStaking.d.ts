/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import {Contract, ContractOptions } from "web3-eth-contract";
import { TransactionObject } from "./types";


export class ArianeeStaking extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ArianeeStaking;
  methods: {
    getPersonalStakeActualAmounts(_address: string): TransactionObject<(BN)[]>;

    getPersonalStakeForAddresses(
      _address: string
    ): TransactionObject<(string)[]>;

    getPersonalStakes(
      _address: string
    ): TransactionObject<{
      0: (BN)[];
      1: (BN)[];
      2: (string)[];
    }>;

    getPersonalStakeUnlockedTimestamps(
      _address: string
    ): TransactionObject<(BN)[]>;

    stakeHolders(
      arg0: string
    ): TransactionObject<{
      totalStakedFor: BN;
      personalStakeIndex: BN;
      exists: boolean;
      0: BN;
      1: BN;
      2: boolean;
    }>;

    totalStakedFor(_address: string): TransactionObject<BN>;

    stake(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    stakeFor(
      _user: string,
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    stakeWithMinimal(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    udpateFees(_fees: number | string): TransactionObject<void>;

    unlockStakeWithFee(
      _staker: string,
      _percentUnstake: number | string
    ): TransactionObject<void>;

    unstake(
      _amount: number | string,
      _data: string | number[]
    ): TransactionObject<void>;

    updateAriaUSDExchange(
      _newAriaUSDExchange: number | string
    ): TransactionObject<void>;

    updateDefaultLockInDuration(
      _defaultLockInDuration: number | string
    ): TransactionObject<void>;

    updateFeesReceiver(_newFeesReceiver: string): TransactionObject<void>;

    updateMinimalUSDStakable(
      _newMinimalUSDStakable: number | string
    ): TransactionObject<void>;

    ariaUSDExchange(): TransactionObject<BN>;
    defaultLockInDuration(): TransactionObject<BN>;
    feesReceiver(): TransactionObject<string>;
    minimalUSDStakable(): TransactionObject<BN>;
    owner(): TransactionObject<string>;
    supportsHistory(): TransactionObject<boolean>;
    token(): TransactionObject<string>;
    totalStaked(): TransactionObject<BN>;
  };

}
