/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ArianeeIdentity extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): ArianeeIdentity;
  methods: {
    waitingURI(_identity: string): TransactionObject<string>;

    compromiseIdentityDate(_identity: string): TransactionObject<BN>;

    waitingImprint(_identity: string): TransactionObject<string>;

    addressFromId(_id: string | number[]): TransactionObject<string>;

    addressURI(_identity: string): TransactionObject<string>;

    addressImprint(_identity: string): TransactionObject<string>;

    addressIsApproved(_identity: string): TransactionObject<boolean>;

    updateValidatorAddress(
      _newValidatorAddress: string
    ): TransactionObject<void>;

    updateBouncerAddress(_newBouncerAddress: string): TransactionObject<void>;

    removeAddressFromApprovedList(_identity: string): TransactionObject<void>;

    validateInformation(
      _identity: string,
      _uriToValidate: string,
      _imprintToValidate: string | number[]
    ): TransactionObject<void>;

    updateCompromiseDate(
      _identity: string,
      _compromiseDate: number | string
    ): TransactionObject<void>;

    updateInformations(
      _uri: string,
      _imprint: string | number[]
    ): TransactionObject<void>;

    addAddressToApprovedList(_newIdentity: string): TransactionObject<string>;

    transferOwnership(_newOwner: string): TransactionObject<void>;

    validatorAddress(): TransactionObject<string>;
    owner(): TransactionObject<string>;
    bouncerAddress(): TransactionObject<string>;
  };
  events: {
    AddressApprovedAdded: ContractEvent<{
      _newIdentity: string;
      _addressId: string;
      0: string;
      1: string;
    }>;
    AddressApprovedRemoved: ContractEvent<string>;
    URIUpdated: ContractEvent<{
      _identity: string;
      _uri: string;
      _imprint: string;
      0: string;
      1: string;
      2: string;
    }>;
    URIValidate: ContractEvent<{
      _identity: string;
      _uri: string;
      _imprint: string;
      0: string;
      1: string;
      2: string;
    }>;
    IdentityCompromised: ContractEvent<{
      _identity: string;
      _compromiseDate: BN;
      0: string;
      1: BN;
    }>;
    SetAddress: ContractEvent<{
      _addressType: string;
      _newAddress: string;
      0: string;
      1: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
