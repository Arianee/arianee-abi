/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeSmartAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ArianeeSmartAssetStorageV0Location"
      | "DEFAULT_ADMIN_ROLE"
      | "addTokenAccess"
      | "approve"
      | "arianeeWhitelist"
      | "balanceOf"
      | "canOperate"
      | "destroy"
      | "getApproved"
      | "getRoleAdmin"
      | "getStoreAddress"
      | "grantRole"
      | "hasRole"
      | "hydrateToken"
      | "initialize"
      | "isAccessValid"
      | "isApprovedForAll"
      | "isRequestable"
      | "isSoulbound"
      | "isTrustedForwarder"
      | "issuerOf"
      | "name"
      | "ownerOf"
      | "paused"
      | "recoverTokenToIssuer"
      | "recoveryRequestOpen"
      | "renounceRole"
      | "requestToken"
      | "reserveToken"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setUriBase"
      | "store"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenCreation"
      | "tokenHashedAccess"
      | "tokenImprint"
      | "tokenOfOwnerByIndex"
      | "tokenRecoveryDate"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "trustedForwarder"
      | "updateRecoveryRequest"
      | "updateTokenURI"
      | "validRecoveryRequest"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Hydrated"
      | "Initialized"
      | "Paused"
      | "RecoveryRequestUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetNewUriBase"
      | "TokenAccessAdded"
      | "TokenDestroyed"
      | "TokenRecovered"
      | "TokenURIUpdated"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ArianeeSmartAssetStorageV0Location",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenAccess",
    values: [BigNumberish, AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canOperate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoreAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hydrateToken",
    values: [
      BigNumberish,
      BytesLike,
      string,
      AddressLike,
      BigNumberish,
      boolean,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccessValid",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSoulbound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTokenToIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryRequestOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToken",
    values: [BigNumberish, BytesLike, boolean, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setUriBase", values: [string]): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCreation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHashedAccess",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImprint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRecoveryDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecoveryRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validRecoveryRequest",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ArianeeSmartAssetStorageV0Location",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arianeeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canOperate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hydrateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAccessValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSoulbound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokenToIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryRequestOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUriBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenHashedAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenImprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRecoveryDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecoveryRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validRecoveryRequest",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HydratedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _imprint: BytesLike,
    _uri: string,
    _initialKey: AddressLike,
    _tokenRecoveryTimestamp: BigNumberish,
    _initialKeyIsRequestKey: boolean,
    _tokenCreation: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _imprint: string,
    _uri: string,
    _initialKey: string,
    _tokenRecoveryTimestamp: bigint,
    _initialKeyIsRequestKey: boolean,
    _tokenCreation: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _imprint: string;
    _uri: string;
    _initialKey: string;
    _tokenRecoveryTimestamp: bigint;
    _initialKeyIsRequestKey: boolean;
    _tokenCreation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryRequestUpdatedEvent {
  export type InputTuple = [_tokenId: BigNumberish, _active: boolean];
  export type OutputTuple = [_tokenId: bigint, _active: boolean];
  export interface OutputObject {
    _tokenId: bigint;
    _active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNewUriBaseEvent {
  export type InputTuple = [_newUriBase: string];
  export type OutputTuple = [_newUriBase: string];
  export interface OutputObject {
    _newUriBase: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAccessAddedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _encryptedTokenKey: AddressLike,
    _enable: boolean,
    _tokenType: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _encryptedTokenKey: string,
    _enable: boolean,
    _tokenType: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _encryptedTokenKey: string;
    _enable: boolean;
    _tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDestroyedEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRecoveredEvent {
  export type InputTuple = [_token: BigNumberish];
  export type OutputTuple = [_token: bigint];
  export interface OutputObject {
    _token: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenURIUpdatedEvent {
  export type InputTuple = [_tokenId: BigNumberish, URI: string];
  export type OutputTuple = [_tokenId: bigint, URI: string];
  export interface OutputObject {
    _tokenId: bigint;
    URI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeSmartAsset extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeSmartAsset;
  waitForDeployment(): Promise<this>;

  interface: ArianeeSmartAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ArianeeSmartAssetStorageV0Location: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addTokenAccess: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _key: AddressLike,
      _enable: boolean,
      _accessType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  arianeeWhitelist: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  canOperate: TypedContractMethod<
    [_tokenId: BigNumberish, _operator: AddressLike],
    [boolean],
    "view"
  >;

  destroy: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStoreAddress: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hydrateToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _initialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _issuer: AddressLike,
      _soulbound: boolean
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _initialAdmin: AddressLike,
      _storeAddress: AddressLike,
      _whitelistAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isAccessValid: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _accessType: BigNumberish,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isRequestable: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  isSoulbound: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  issuerOf: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverTokenToIssuer: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  recoveryRequestOpen: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepCurrentAccess: boolean,
      _newOwner: AddressLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  reserveToken: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setUriBase: TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;

  store: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenCreation: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  tokenHashedAccess: TypedContractMethod<
    [_tokenId: BigNumberish, _accessType: BigNumberish],
    [string],
    "view"
  >;

  tokenImprint: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenRecoveryDate: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  updateRecoveryRequest: TypedContractMethod<
    [_tokenId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;

  updateTokenURI: TypedContractMethod<
    [_tokenId: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;

  validRecoveryRequest: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ArianeeSmartAssetStorageV0Location"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addTokenAccess"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _key: AddressLike,
      _enable: boolean,
      _accessType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "arianeeWhitelist"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canOperate"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStoreAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hydrateToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _initialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _issuer: AddressLike,
      _soulbound: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _initialAdmin: AddressLike,
      _storeAddress: AddressLike,
      _whitelistAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAccessValid"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _accessType: BigNumberish,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRequestable"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSoulbound"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "issuerOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverTokenToIssuer"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoveryRequestOpen"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepCurrentAccess: boolean,
      _newOwner: AddressLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUriBase"
  ): TypedContractMethod<[_newBaseURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "store"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenCreation"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenHashedAccess"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _accessType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenImprint"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenRecoveryDate"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateRecoveryRequest"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenURI"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validRecoveryRequest"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Hydrated"
  ): TypedContractEvent<
    HydratedEvent.InputTuple,
    HydratedEvent.OutputTuple,
    HydratedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryRequestUpdated"
  ): TypedContractEvent<
    RecoveryRequestUpdatedEvent.InputTuple,
    RecoveryRequestUpdatedEvent.OutputTuple,
    RecoveryRequestUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetNewUriBase"
  ): TypedContractEvent<
    SetNewUriBaseEvent.InputTuple,
    SetNewUriBaseEvent.OutputTuple,
    SetNewUriBaseEvent.OutputObject
  >;
  getEvent(
    key: "TokenAccessAdded"
  ): TypedContractEvent<
    TokenAccessAddedEvent.InputTuple,
    TokenAccessAddedEvent.OutputTuple,
    TokenAccessAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDestroyed"
  ): TypedContractEvent<
    TokenDestroyedEvent.InputTuple,
    TokenDestroyedEvent.OutputTuple,
    TokenDestroyedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRecovered"
  ): TypedContractEvent<
    TokenRecoveredEvent.InputTuple,
    TokenRecoveredEvent.OutputTuple,
    TokenRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "TokenURIUpdated"
  ): TypedContractEvent<
    TokenURIUpdatedEvent.InputTuple,
    TokenURIUpdatedEvent.OutputTuple,
    TokenURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Hydrated(uint256,bytes32,string,address,uint256,bool,uint256)": TypedContractEvent<
      HydratedEvent.InputTuple,
      HydratedEvent.OutputTuple,
      HydratedEvent.OutputObject
    >;
    Hydrated: TypedContractEvent<
      HydratedEvent.InputTuple,
      HydratedEvent.OutputTuple,
      HydratedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RecoveryRequestUpdated(uint256,bool)": TypedContractEvent<
      RecoveryRequestUpdatedEvent.InputTuple,
      RecoveryRequestUpdatedEvent.OutputTuple,
      RecoveryRequestUpdatedEvent.OutputObject
    >;
    RecoveryRequestUpdated: TypedContractEvent<
      RecoveryRequestUpdatedEvent.InputTuple,
      RecoveryRequestUpdatedEvent.OutputTuple,
      RecoveryRequestUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetNewUriBase(string)": TypedContractEvent<
      SetNewUriBaseEvent.InputTuple,
      SetNewUriBaseEvent.OutputTuple,
      SetNewUriBaseEvent.OutputObject
    >;
    SetNewUriBase: TypedContractEvent<
      SetNewUriBaseEvent.InputTuple,
      SetNewUriBaseEvent.OutputTuple,
      SetNewUriBaseEvent.OutputObject
    >;

    "TokenAccessAdded(uint256,address,bool,uint256)": TypedContractEvent<
      TokenAccessAddedEvent.InputTuple,
      TokenAccessAddedEvent.OutputTuple,
      TokenAccessAddedEvent.OutputObject
    >;
    TokenAccessAdded: TypedContractEvent<
      TokenAccessAddedEvent.InputTuple,
      TokenAccessAddedEvent.OutputTuple,
      TokenAccessAddedEvent.OutputObject
    >;

    "TokenDestroyed(uint256)": TypedContractEvent<
      TokenDestroyedEvent.InputTuple,
      TokenDestroyedEvent.OutputTuple,
      TokenDestroyedEvent.OutputObject
    >;
    TokenDestroyed: TypedContractEvent<
      TokenDestroyedEvent.InputTuple,
      TokenDestroyedEvent.OutputTuple,
      TokenDestroyedEvent.OutputObject
    >;

    "TokenRecovered(uint256)": TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;
    TokenRecovered: TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;

    "TokenURIUpdated(uint256,string)": TypedContractEvent<
      TokenURIUpdatedEvent.InputTuple,
      TokenURIUpdatedEvent.OutputTuple,
      TokenURIUpdatedEvent.OutputObject
    >;
    TokenURIUpdated: TypedContractEvent<
      TokenURIUpdatedEvent.InputTuple,
      TokenURIUpdatedEvent.OutputTuple,
      TokenURIUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
