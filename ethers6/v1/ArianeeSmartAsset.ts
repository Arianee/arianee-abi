/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeSmartAssetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "supportsInterface"
      | "isTokenValid"
      | "name"
      | "getApproved"
      | "approve"
      | "grantAbilities"
      | "validRecoveryRequest"
      | "arianeeWhitelist"
      | "totalSupply"
      | "updateTokenURI"
      | "transferFrom"
      | "reserveToken"
      | "setUriBase"
      | "tokenOfOwnerByIndex"
      | "unpause"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "addressToAbility"
      | "tokenByIndex"
      | "paused"
      | "tokenCreation"
      | "ownerOf"
      | "recoveryRequestOpen"
      | "setStoreAddress"
      | "balanceOf"
      | "tokenImprint"
      | "canOperate"
      | "pause"
      | "owner"
      | "symbol"
      | "store"
      | "destroy"
      | "setWhitelistAddress"
      | "setApprovalForAll"
      | "issuerOf"
      | "revokeAbilities"
      | "recoverTokenToIssuer"
      | "addTokenAccess"
      | "isAble"
      | "getRewards"
      | "tokenURI"
      | "tokenHashedAccess"
      | "tokenRecoveryDate"
      | "requestToken"
      | "isApprovedForAll"
      | "hydrateToken"
      | "transferOwnership"
      | "updateRecoveryRequest"
      | "isRequestable"
      | "uriBase"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetAddress"
      | "Hydrated"
      | "RecoveryRequestUpdated"
      | "TokenRecovered"
      | "TokenURIUpdated"
      | "TokenAccessAdded"
      | "TokenDestroyed"
      | "SetNewUriBase"
      | "Pause"
      | "Unpause"
      | "OwnershipTransferred"
      | "GrantAbilities"
      | "RevokeAbilities"
      | "Transfer"
      | "Approval"
      | "ApprovalForAll"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenValid",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAbilities",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validRecoveryRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUriBase", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToAbility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenCreation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryRequestOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStoreAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenImprint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canOperate",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "store", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "issuerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAbilities",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTokenToIssuer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenAccess",
    values: [BigNumberish, AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAble",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenHashedAccess",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRecoveryDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToken",
    values: [BigNumberish, BytesLike, boolean, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hydrateToken",
    values: [
      BigNumberish,
      BytesLike,
      string,
      AddressLike,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecoveryRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isRequestable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uriBase", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAbilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validRecoveryRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arianeeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUriBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoveryRequestOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenImprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canOperate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issuerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAbilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTokenToIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAble", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenHashedAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRecoveryDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hydrateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRecoveryRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRequestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uriBase", data: BytesLike): Result;
}

export namespace SetAddressEvent {
  export type InputTuple = [_addressType: string, _newAddress: AddressLike];
  export type OutputTuple = [_addressType: string, _newAddress: string];
  export interface OutputObject {
    _addressType: string;
    _newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HydratedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _imprint: BytesLike,
    _uri: string,
    _initialKey: AddressLike,
    _tokenRecoveryTimestamp: BigNumberish,
    _initialKeyIsRequestKey: boolean,
    _tokenCreation: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _imprint: string,
    _uri: string,
    _initialKey: string,
    _tokenRecoveryTimestamp: bigint,
    _initialKeyIsRequestKey: boolean,
    _tokenCreation: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _imprint: string;
    _uri: string;
    _initialKey: string;
    _tokenRecoveryTimestamp: bigint;
    _initialKeyIsRequestKey: boolean;
    _tokenCreation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveryRequestUpdatedEvent {
  export type InputTuple = [_tokenId: BigNumberish, _active: boolean];
  export type OutputTuple = [_tokenId: bigint, _active: boolean];
  export interface OutputObject {
    _tokenId: bigint;
    _active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRecoveredEvent {
  export type InputTuple = [_token: BigNumberish];
  export type OutputTuple = [_token: bigint];
  export interface OutputObject {
    _token: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenURIUpdatedEvent {
  export type InputTuple = [_tokenId: BigNumberish, URI: string];
  export type OutputTuple = [_tokenId: bigint, URI: string];
  export interface OutputObject {
    _tokenId: bigint;
    URI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAccessAddedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _encryptedTokenKey: AddressLike,
    _enable: boolean,
    _tokenType: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _encryptedTokenKey: string,
    _enable: boolean,
    _tokenType: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _encryptedTokenKey: string;
    _enable: boolean;
    _tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenDestroyedEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNewUriBaseEvent {
  export type InputTuple = [_newUriBase: string];
  export type OutputTuple = [_newUriBase: string];
  export interface OutputObject {
    _newUriBase: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantAbilitiesEvent {
  export type InputTuple = [_target: AddressLike, _abilities: BigNumberish];
  export type OutputTuple = [_target: string, _abilities: bigint];
  export interface OutputObject {
    _target: string;
    _abilities: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeAbilitiesEvent {
  export type InputTuple = [_target: AddressLike, _abilities: BigNumberish];
  export type OutputTuple = [_target: string, _abilities: bigint];
  export interface OutputObject {
    _target: string;
    _abilities: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _approved: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _approved: string,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _approved: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeSmartAsset extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeSmartAsset;
  waitForDeployment(): Promise<this>;

  interface: ArianeeSmartAssetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  supportsInterface: TypedContractMethod<
    [_interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  isTokenValid: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _tokenType: BigNumberish,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  approve: TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  grantAbilities: TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [void],
    "nonpayable"
  >;

  validRecoveryRequest: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  arianeeWhitelist: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  updateTokenURI: TypedContractMethod<
    [_tokenId: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  reserveToken: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike, _rewards: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUriBase: TypedContractMethod<[_newURIBase: string], [void], "nonpayable">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  addressToAbility: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  tokenByIndex: TypedContractMethod<[_index: BigNumberish], [bigint], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  tokenCreation: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  ownerOf: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  recoveryRequestOpen: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  setStoreAddress: TypedContractMethod<
    [_storeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  tokenImprint: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  canOperate: TypedContractMethod<
    [_tokenId: BigNumberish, _operator: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  store: TypedContractMethod<[], [string], "view">;

  destroy: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  setWhitelistAddress: TypedContractMethod<
    [_whitelistAddres: AddressLike],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [_operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  issuerOf: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  revokeAbilities: TypedContractMethod<
    [
      _target: AddressLike,
      _abilities: BigNumberish,
      _allowSuperRevoke: boolean
    ],
    [void],
    "nonpayable"
  >;

  recoverTokenToIssuer: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTokenAccess: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _key: AddressLike,
      _enable: boolean,
      _tokenType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isAble: TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [boolean],
    "view"
  >;

  getRewards: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  tokenHashedAccess: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenType: BigNumberish],
    [string],
    "view"
  >;

  tokenRecoveryDate: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  requestToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _newOwner: AddressLike,
      _signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [_owner: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  hydrateToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _initialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _owner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateRecoveryRequest: TypedContractMethod<
    [_tokenId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;

  isRequestable: TypedContractMethod<
    [_tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  uriBase: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenValid"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _tokenType: BigNumberish,
      _signature: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantAbilities"
  ): TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validRecoveryRequest"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "arianeeWhitelist"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateTokenURI"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike, _rewards: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUriBase"
  ): TypedContractMethod<[_newURIBase: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addressToAbility"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenCreation"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "recoveryRequestOpen"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setStoreAddress"
  ): TypedContractMethod<[_storeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenImprint"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "canOperate"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "store"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistAddress"
  ): TypedContractMethod<[_whitelistAddres: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [_operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issuerOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "revokeAbilities"
  ): TypedContractMethod<
    [
      _target: AddressLike,
      _abilities: BigNumberish,
      _allowSuperRevoke: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverTokenToIssuer"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addTokenAccess"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _key: AddressLike,
      _enable: boolean,
      _tokenType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAble"
  ): TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewards"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenHashedAccess"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenRecoveryDate"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _newOwner: AddressLike,
      _signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [_owner: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hydrateToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _initialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _owner: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRecoveryRequest"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isRequestable"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "uriBase"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "SetAddress"
  ): TypedContractEvent<
    SetAddressEvent.InputTuple,
    SetAddressEvent.OutputTuple,
    SetAddressEvent.OutputObject
  >;
  getEvent(
    key: "Hydrated"
  ): TypedContractEvent<
    HydratedEvent.InputTuple,
    HydratedEvent.OutputTuple,
    HydratedEvent.OutputObject
  >;
  getEvent(
    key: "RecoveryRequestUpdated"
  ): TypedContractEvent<
    RecoveryRequestUpdatedEvent.InputTuple,
    RecoveryRequestUpdatedEvent.OutputTuple,
    RecoveryRequestUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenRecovered"
  ): TypedContractEvent<
    TokenRecoveredEvent.InputTuple,
    TokenRecoveredEvent.OutputTuple,
    TokenRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "TokenURIUpdated"
  ): TypedContractEvent<
    TokenURIUpdatedEvent.InputTuple,
    TokenURIUpdatedEvent.OutputTuple,
    TokenURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAccessAdded"
  ): TypedContractEvent<
    TokenAccessAddedEvent.InputTuple,
    TokenAccessAddedEvent.OutputTuple,
    TokenAccessAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenDestroyed"
  ): TypedContractEvent<
    TokenDestroyedEvent.InputTuple,
    TokenDestroyedEvent.OutputTuple,
    TokenDestroyedEvent.OutputObject
  >;
  getEvent(
    key: "SetNewUriBase"
  ): TypedContractEvent<
    SetNewUriBaseEvent.InputTuple,
    SetNewUriBaseEvent.OutputTuple,
    SetNewUriBaseEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "GrantAbilities"
  ): TypedContractEvent<
    GrantAbilitiesEvent.InputTuple,
    GrantAbilitiesEvent.OutputTuple,
    GrantAbilitiesEvent.OutputObject
  >;
  getEvent(
    key: "RevokeAbilities"
  ): TypedContractEvent<
    RevokeAbilitiesEvent.InputTuple,
    RevokeAbilitiesEvent.OutputTuple,
    RevokeAbilitiesEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;

  filters: {
    "SetAddress(string,address)": TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;
    SetAddress: TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;

    "Hydrated(uint256,bytes32,string,address,uint256,bool,uint256)": TypedContractEvent<
      HydratedEvent.InputTuple,
      HydratedEvent.OutputTuple,
      HydratedEvent.OutputObject
    >;
    Hydrated: TypedContractEvent<
      HydratedEvent.InputTuple,
      HydratedEvent.OutputTuple,
      HydratedEvent.OutputObject
    >;

    "RecoveryRequestUpdated(uint256,bool)": TypedContractEvent<
      RecoveryRequestUpdatedEvent.InputTuple,
      RecoveryRequestUpdatedEvent.OutputTuple,
      RecoveryRequestUpdatedEvent.OutputObject
    >;
    RecoveryRequestUpdated: TypedContractEvent<
      RecoveryRequestUpdatedEvent.InputTuple,
      RecoveryRequestUpdatedEvent.OutputTuple,
      RecoveryRequestUpdatedEvent.OutputObject
    >;

    "TokenRecovered(uint256)": TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;
    TokenRecovered: TypedContractEvent<
      TokenRecoveredEvent.InputTuple,
      TokenRecoveredEvent.OutputTuple,
      TokenRecoveredEvent.OutputObject
    >;

    "TokenURIUpdated(uint256,string)": TypedContractEvent<
      TokenURIUpdatedEvent.InputTuple,
      TokenURIUpdatedEvent.OutputTuple,
      TokenURIUpdatedEvent.OutputObject
    >;
    TokenURIUpdated: TypedContractEvent<
      TokenURIUpdatedEvent.InputTuple,
      TokenURIUpdatedEvent.OutputTuple,
      TokenURIUpdatedEvent.OutputObject
    >;

    "TokenAccessAdded(uint256,address,bool,uint256)": TypedContractEvent<
      TokenAccessAddedEvent.InputTuple,
      TokenAccessAddedEvent.OutputTuple,
      TokenAccessAddedEvent.OutputObject
    >;
    TokenAccessAdded: TypedContractEvent<
      TokenAccessAddedEvent.InputTuple,
      TokenAccessAddedEvent.OutputTuple,
      TokenAccessAddedEvent.OutputObject
    >;

    "TokenDestroyed(uint256)": TypedContractEvent<
      TokenDestroyedEvent.InputTuple,
      TokenDestroyedEvent.OutputTuple,
      TokenDestroyedEvent.OutputObject
    >;
    TokenDestroyed: TypedContractEvent<
      TokenDestroyedEvent.InputTuple,
      TokenDestroyedEvent.OutputTuple,
      TokenDestroyedEvent.OutputObject
    >;

    "SetNewUriBase(string)": TypedContractEvent<
      SetNewUriBaseEvent.InputTuple,
      SetNewUriBaseEvent.OutputTuple,
      SetNewUriBaseEvent.OutputObject
    >;
    SetNewUriBase: TypedContractEvent<
      SetNewUriBaseEvent.InputTuple,
      SetNewUriBaseEvent.OutputTuple,
      SetNewUriBaseEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "GrantAbilities(address,uint256)": TypedContractEvent<
      GrantAbilitiesEvent.InputTuple,
      GrantAbilitiesEvent.OutputTuple,
      GrantAbilitiesEvent.OutputObject
    >;
    GrantAbilities: TypedContractEvent<
      GrantAbilitiesEvent.InputTuple,
      GrantAbilitiesEvent.OutputTuple,
      GrantAbilitiesEvent.OutputObject
    >;

    "RevokeAbilities(address,uint256)": TypedContractEvent<
      RevokeAbilitiesEvent.InputTuple,
      RevokeAbilitiesEvent.OutputTuple,
      RevokeAbilitiesEvent.OutputObject
    >;
    RevokeAbilities: TypedContractEvent<
      RevokeAbilitiesEvent.InputTuple,
      RevokeAbilitiesEvent.OutputTuple,
      RevokeAbilitiesEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
  };
}
