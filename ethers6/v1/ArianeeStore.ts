/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "percentOfDispatch"
      | "buyCredit"
      | "setAriaUSDExchange"
      | "getAriaFromOldStore"
      | "readUpdateSmartAsset"
      | "nonFungibleRegistry"
      | "reserveToken"
      | "readMessage"
      | "creditHistory"
      | "ariaUSDExchange"
      | "acceptEvent"
      | "setAuthorizedExchangeAddress"
      | "unpause"
      | "setDispatchPercent"
      | "acceptedToken"
      | "arianeeProjectAddress"
      | "refuseEvent"
      | "paused"
      | "setArianeeProjectAddress"
      | "protocolInfraAddress"
      | "withdrawArias"
      | "canDestroy"
      | "pause"
      | "setProtocolInfraAddress"
      | "owner"
      | "createMessage"
      | "arianeeUpdate"
      | "arianeeEvent"
      | "creditPriceUSD"
      | "requestToken(uint256,bytes32,bool,address,bytes,address)"
      | "requestToken(uint256,bytes32,bool,address,bytes)"
      | "canTransfer"
      | "createEvent"
      | "arianeeMessage"
      | "hydrateToken"
      | "transferOwnership"
      | "authorizedExchangeAddress"
      | "getCreditPrice"
      | "updateSmartAsset"
      | "setCreditPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetAddress"
      | "NewCreditPrice"
      | "NewAriaUSDExchange"
      | "CreditBought"
      | "NewDispatchPercent"
      | "CreditSpended"
      | "Pause"
      | "Unpause"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "percentOfDispatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCredit",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAriaUSDExchange",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAriaFromOldStore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readUpdateSmartAsset",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonFungibleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readMessage",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creditHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ariaUSDExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptEvent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedExchangeAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDispatchPercent",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeProjectAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refuseEvent",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setArianeeProjectAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolInfraAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawArias",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canDestroy",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProtocolInfraAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMessage",
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditPriceUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToken(uint256,bytes32,bool,address,bytes,address)",
    values: [
      BigNumberish,
      BytesLike,
      boolean,
      AddressLike,
      BytesLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestToken(uint256,bytes32,bool,address,bytes)",
    values: [BigNumberish, BytesLike, boolean, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [BigNumberish, BigNumberish, BytesLike, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "arianeeMessage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hydrateToken",
    values: [
      BigNumberish,
      BytesLike,
      string,
      AddressLike,
      BigNumberish,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedExchangeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSmartAsset",
    values: [BigNumberish, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditPrice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "percentOfDispatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAriaUSDExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAriaFromOldStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readUpdateSmartAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonFungibleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ariaUSDExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDispatchPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arianeeProjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refuseEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setArianeeProjectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolInfraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawArias",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canDestroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolInfraAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arianeeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arianeeEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToken(uint256,bytes32,bool,address,bytes,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToken(uint256,bytes32,bool,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arianeeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hydrateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedExchangeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSmartAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditPrice",
    data: BytesLike
  ): Result;
}

export namespace SetAddressEvent {
  export type InputTuple = [_addressType: string, _newAddress: AddressLike];
  export type OutputTuple = [_addressType: string, _newAddress: string];
  export interface OutputObject {
    _addressType: string;
    _newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCreditPriceEvent {
  export type InputTuple = [_creditType: BigNumberish, _price: BigNumberish];
  export type OutputTuple = [_creditType: bigint, _price: bigint];
  export interface OutputObject {
    _creditType: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAriaUSDExchangeEvent {
  export type InputTuple = [_ariaUSDExchange: BigNumberish];
  export type OutputTuple = [_ariaUSDExchange: bigint];
  export interface OutputObject {
    _ariaUSDExchange: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditBoughtEvent {
  export type InputTuple = [
    buyer: AddressLike,
    _receiver: AddressLike,
    _creditType: BigNumberish,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    _receiver: string,
    _creditType: bigint,
    quantity: bigint
  ];
  export interface OutputObject {
    buyer: string;
    _receiver: string;
    _creditType: bigint;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDispatchPercentEvent {
  export type InputTuple = [
    _percentInfra: BigNumberish,
    _percentBrandsProvider: BigNumberish,
    _percentOwnerProvider: BigNumberish,
    _arianeeProject: BigNumberish,
    _assetHolder: BigNumberish
  ];
  export type OutputTuple = [
    _percentInfra: bigint,
    _percentBrandsProvider: bigint,
    _percentOwnerProvider: bigint,
    _arianeeProject: bigint,
    _assetHolder: bigint
  ];
  export interface OutputObject {
    _percentInfra: bigint;
    _percentBrandsProvider: bigint;
    _percentOwnerProvider: bigint;
    _arianeeProject: bigint;
    _assetHolder: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditSpendedEvent {
  export type InputTuple = [_type: BigNumberish, _quantity: BigNumberish];
  export type OutputTuple = [_type: bigint, _quantity: bigint];
  export interface OutputObject {
    _type: bigint;
    _quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeStore extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeStore;
  waitForDeployment(): Promise<this>;

  interface: ArianeeStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  percentOfDispatch: TypedContractMethod<
    [_receiver: BigNumberish],
    [bigint],
    "view"
  >;

  buyCredit: TypedContractMethod<
    [_creditType: BigNumberish, _quantity: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  setAriaUSDExchange: TypedContractMethod<
    [_ariaUSDExchange: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAriaFromOldStore: TypedContractMethod<
    [_oldStoreAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  readUpdateSmartAsset: TypedContractMethod<
    [_tokenId: BigNumberish, _walletProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  nonFungibleRegistry: TypedContractMethod<[], [string], "view">;

  reserveToken: TypedContractMethod<
    [_id: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  readMessage: TypedContractMethod<
    [_messageId: BigNumberish, _walletProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  creditHistory: TypedContractMethod<[], [string], "view">;

  ariaUSDExchange: TypedContractMethod<[], [bigint], "view">;

  acceptEvent: TypedContractMethod<
    [_eventId: BigNumberish, _providerOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setAuthorizedExchangeAddress: TypedContractMethod<
    [_authorizedExchangeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  setDispatchPercent: TypedContractMethod<
    [
      _percentInfra: BigNumberish,
      _percentBrandsProvider: BigNumberish,
      _percentOwnerProvider: BigNumberish,
      _arianeeProject: BigNumberish,
      _assetHolder: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  acceptedToken: TypedContractMethod<[], [string], "view">;

  arianeeProjectAddress: TypedContractMethod<[], [string], "view">;

  refuseEvent: TypedContractMethod<
    [_eventId: BigNumberish, _providerOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  setArianeeProjectAddress: TypedContractMethod<
    [_arianeeProjectAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  protocolInfraAddress: TypedContractMethod<[], [string], "view">;

  withdrawArias: TypedContractMethod<[], [void], "nonpayable">;

  canDestroy: TypedContractMethod<
    [_tokenId: BigNumberish, _sender: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  setProtocolInfraAddress: TypedContractMethod<
    [_protocolInfraAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  createMessage: TypedContractMethod<
    [
      _messageId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  arianeeUpdate: TypedContractMethod<[], [string], "view">;

  arianeeEvent: TypedContractMethod<[], [string], "view">;

  creditPriceUSD: TypedContractMethod<
    [_creditType: BigNumberish],
    [bigint],
    "view"
  >;

  "requestToken(uint256,bytes32,bool,address,bytes,address)": TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _providerOwner: AddressLike,
      _signature: BytesLike,
      _newOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "requestToken(uint256,bytes32,bool,address,bytes)": TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _providerOwner: AddressLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  canTransfer: TypedContractMethod<
    [_to: AddressLike, _from: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  createEvent: TypedContractMethod<
    [
      _eventId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  arianeeMessage: TypedContractMethod<[], [string], "view">;

  hydrateToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _encryptedInitialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedExchangeAddress: TypedContractMethod<[], [string], "view">;

  getCreditPrice: TypedContractMethod<
    [_creditType: BigNumberish],
    [bigint],
    "view"
  >;

  updateSmartAsset: TypedContractMethod<
    [_tokenId: BigNumberish, _imprint: BytesLike, _providerBrand: AddressLike],
    [void],
    "nonpayable"
  >;

  setCreditPrice: TypedContractMethod<
    [_creditType: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "percentOfDispatch"
  ): TypedContractMethod<[_receiver: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyCredit"
  ): TypedContractMethod<
    [_creditType: BigNumberish, _quantity: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAriaUSDExchange"
  ): TypedContractMethod<
    [_ariaUSDExchange: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAriaFromOldStore"
  ): TypedContractMethod<[_oldStoreAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "readUpdateSmartAsset"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _walletProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonFungibleRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reserveToken"
  ): TypedContractMethod<
    [_id: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "readMessage"
  ): TypedContractMethod<
    [_messageId: BigNumberish, _walletProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditHistory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ariaUSDExchange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _providerOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedExchangeAddress"
  ): TypedContractMethod<
    [_authorizedExchangeAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDispatchPercent"
  ): TypedContractMethod<
    [
      _percentInfra: BigNumberish,
      _percentBrandsProvider: BigNumberish,
      _percentOwnerProvider: BigNumberish,
      _arianeeProject: BigNumberish,
      _assetHolder: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acceptedToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "arianeeProjectAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refuseEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _providerOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setArianeeProjectAddress"
  ): TypedContractMethod<
    [_arianeeProjectAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolInfraAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawArias"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "canDestroy"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _sender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolInfraAddress"
  ): TypedContractMethod<
    [_protocolInfraAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createMessage"
  ): TypedContractMethod<
    [
      _messageId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "arianeeUpdate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "arianeeEvent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditPriceUSD"
  ): TypedContractMethod<[_creditType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestToken(uint256,bytes32,bool,address,bytes,address)"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _providerOwner: AddressLike,
      _signature: BytesLike,
      _newOwner: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestToken(uint256,bytes32,bool,address,bytes)"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _hash: BytesLike,
      _keepRequestToken: boolean,
      _providerOwner: AddressLike,
      _signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canTransfer"
  ): TypedContractMethod<
    [_to: AddressLike, _from: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _eventId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "arianeeMessage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hydrateToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _encryptedInitialKey: AddressLike,
      _tokenRecoveryTimestamp: BigNumberish,
      _initialKeyIsRequestKey: boolean,
      _providerBrand: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedExchangeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreditPrice"
  ): TypedContractMethod<[_creditType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateSmartAsset"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _imprint: BytesLike, _providerBrand: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCreditPrice"
  ): TypedContractMethod<
    [_creditType: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "SetAddress"
  ): TypedContractEvent<
    SetAddressEvent.InputTuple,
    SetAddressEvent.OutputTuple,
    SetAddressEvent.OutputObject
  >;
  getEvent(
    key: "NewCreditPrice"
  ): TypedContractEvent<
    NewCreditPriceEvent.InputTuple,
    NewCreditPriceEvent.OutputTuple,
    NewCreditPriceEvent.OutputObject
  >;
  getEvent(
    key: "NewAriaUSDExchange"
  ): TypedContractEvent<
    NewAriaUSDExchangeEvent.InputTuple,
    NewAriaUSDExchangeEvent.OutputTuple,
    NewAriaUSDExchangeEvent.OutputObject
  >;
  getEvent(
    key: "CreditBought"
  ): TypedContractEvent<
    CreditBoughtEvent.InputTuple,
    CreditBoughtEvent.OutputTuple,
    CreditBoughtEvent.OutputObject
  >;
  getEvent(
    key: "NewDispatchPercent"
  ): TypedContractEvent<
    NewDispatchPercentEvent.InputTuple,
    NewDispatchPercentEvent.OutputTuple,
    NewDispatchPercentEvent.OutputObject
  >;
  getEvent(
    key: "CreditSpended"
  ): TypedContractEvent<
    CreditSpendedEvent.InputTuple,
    CreditSpendedEvent.OutputTuple,
    CreditSpendedEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "SetAddress(string,address)": TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;
    SetAddress: TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;

    "NewCreditPrice(uint256,uint256)": TypedContractEvent<
      NewCreditPriceEvent.InputTuple,
      NewCreditPriceEvent.OutputTuple,
      NewCreditPriceEvent.OutputObject
    >;
    NewCreditPrice: TypedContractEvent<
      NewCreditPriceEvent.InputTuple,
      NewCreditPriceEvent.OutputTuple,
      NewCreditPriceEvent.OutputObject
    >;

    "NewAriaUSDExchange(uint256)": TypedContractEvent<
      NewAriaUSDExchangeEvent.InputTuple,
      NewAriaUSDExchangeEvent.OutputTuple,
      NewAriaUSDExchangeEvent.OutputObject
    >;
    NewAriaUSDExchange: TypedContractEvent<
      NewAriaUSDExchangeEvent.InputTuple,
      NewAriaUSDExchangeEvent.OutputTuple,
      NewAriaUSDExchangeEvent.OutputObject
    >;

    "CreditBought(address,address,uint256,uint256)": TypedContractEvent<
      CreditBoughtEvent.InputTuple,
      CreditBoughtEvent.OutputTuple,
      CreditBoughtEvent.OutputObject
    >;
    CreditBought: TypedContractEvent<
      CreditBoughtEvent.InputTuple,
      CreditBoughtEvent.OutputTuple,
      CreditBoughtEvent.OutputObject
    >;

    "NewDispatchPercent(uint8,uint8,uint8,uint8,uint8)": TypedContractEvent<
      NewDispatchPercentEvent.InputTuple,
      NewDispatchPercentEvent.OutputTuple,
      NewDispatchPercentEvent.OutputObject
    >;
    NewDispatchPercent: TypedContractEvent<
      NewDispatchPercentEvent.InputTuple,
      NewDispatchPercentEvent.OutputTuple,
      NewDispatchPercentEvent.OutputObject
    >;

    "CreditSpended(uint256,uint256)": TypedContractEvent<
      CreditSpendedEvent.InputTuple,
      CreditSpendedEvent.OutputTuple,
      CreditSpendedEvent.OutputObject
    >;
    CreditSpended: TypedContractEvent<
      CreditSpendedEvent.InputTuple,
      CreditSpendedEvent.OutputTuple,
      CreditSpendedEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
