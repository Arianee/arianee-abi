/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeWhitelistInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "grantAbilities"
      | "isBlacklisted"
      | "addressToAbility"
      | "isAuthorized"
      | "isWhitelisted"
      | "addWhitelistedAddress"
      | "revokeAbilities"
      | "isAble"
      | "addBlacklistedAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "WhitelistedAddressAdded"
      | "BlacklistedAddresAdded"
      | "GrantAbilities"
      | "RevokeAbilities"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "grantAbilities",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToAbility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedAddress",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAbilities",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isAble",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlacklistedAddress",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "grantAbilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAbilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAble", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBlacklistedAddress",
    data: BytesLike
  ): Result;
}

export namespace WhitelistedAddressAddedEvent {
  export type InputTuple = [_tokenId: BigNumberish, _address: AddressLike];
  export type OutputTuple = [_tokenId: bigint, _address: string];
  export interface OutputObject {
    _tokenId: bigint;
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlacklistedAddresAddedEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _tokenId: BigNumberish,
    _activate: boolean
  ];
  export type OutputTuple = [
    _sender: string,
    _tokenId: bigint,
    _activate: boolean
  ];
  export interface OutputObject {
    _sender: string;
    _tokenId: bigint;
    _activate: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrantAbilitiesEvent {
  export type InputTuple = [_target: AddressLike, _abilities: BigNumberish];
  export type OutputTuple = [_target: string, _abilities: bigint];
  export interface OutputObject {
    _target: string;
    _abilities: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeAbilitiesEvent {
  export type InputTuple = [_target: AddressLike, _abilities: BigNumberish];
  export type OutputTuple = [_target: string, _abilities: bigint];
  export interface OutputObject {
    _target: string;
    _abilities: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeWhitelist extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeWhitelist;
  waitForDeployment(): Promise<this>;

  interface: ArianeeWhitelistInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  grantAbilities: TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [void],
    "nonpayable"
  >;

  isBlacklisted: TypedContractMethod<
    [_owner: AddressLike, _sender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  addressToAbility: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  isAuthorized: TypedContractMethod<
    [_tokenId: BigNumberish, _sender: AddressLike, _tokenOwner: AddressLike],
    [boolean],
    "view"
  >;

  isWhitelisted: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  addWhitelistedAddress: TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeAbilities: TypedContractMethod<
    [
      _target: AddressLike,
      _abilities: BigNumberish,
      _allowSuperRevoke: boolean
    ],
    [void],
    "nonpayable"
  >;

  isAble: TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [boolean],
    "view"
  >;

  addBlacklistedAddress: TypedContractMethod<
    [_sender: AddressLike, _tokenId: BigNumberish, _activate: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "grantAbilities"
  ): TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<
    [_owner: AddressLike, _sender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "addressToAbility"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _sender: AddressLike, _tokenOwner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "addWhitelistedAddress"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _address: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeAbilities"
  ): TypedContractMethod<
    [
      _target: AddressLike,
      _abilities: BigNumberish,
      _allowSuperRevoke: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAble"
  ): TypedContractMethod<
    [_target: AddressLike, _abilities: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "addBlacklistedAddress"
  ): TypedContractMethod<
    [_sender: AddressLike, _tokenId: BigNumberish, _activate: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "WhitelistedAddressAdded"
  ): TypedContractEvent<
    WhitelistedAddressAddedEvent.InputTuple,
    WhitelistedAddressAddedEvent.OutputTuple,
    WhitelistedAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "BlacklistedAddresAdded"
  ): TypedContractEvent<
    BlacklistedAddresAddedEvent.InputTuple,
    BlacklistedAddresAddedEvent.OutputTuple,
    BlacklistedAddresAddedEvent.OutputObject
  >;
  getEvent(
    key: "GrantAbilities"
  ): TypedContractEvent<
    GrantAbilitiesEvent.InputTuple,
    GrantAbilitiesEvent.OutputTuple,
    GrantAbilitiesEvent.OutputObject
  >;
  getEvent(
    key: "RevokeAbilities"
  ): TypedContractEvent<
    RevokeAbilitiesEvent.InputTuple,
    RevokeAbilitiesEvent.OutputTuple,
    RevokeAbilitiesEvent.OutputObject
  >;

  filters: {
    "WhitelistedAddressAdded(uint256,address)": TypedContractEvent<
      WhitelistedAddressAddedEvent.InputTuple,
      WhitelistedAddressAddedEvent.OutputTuple,
      WhitelistedAddressAddedEvent.OutputObject
    >;
    WhitelistedAddressAdded: TypedContractEvent<
      WhitelistedAddressAddedEvent.InputTuple,
      WhitelistedAddressAddedEvent.OutputTuple,
      WhitelistedAddressAddedEvent.OutputObject
    >;

    "BlacklistedAddresAdded(address,uint256,bool)": TypedContractEvent<
      BlacklistedAddresAddedEvent.InputTuple,
      BlacklistedAddresAddedEvent.OutputTuple,
      BlacklistedAddresAddedEvent.OutputObject
    >;
    BlacklistedAddresAdded: TypedContractEvent<
      BlacklistedAddresAddedEvent.InputTuple,
      BlacklistedAddresAddedEvent.OutputTuple,
      BlacklistedAddresAddedEvent.OutputObject
    >;

    "GrantAbilities(address,uint256)": TypedContractEvent<
      GrantAbilitiesEvent.InputTuple,
      GrantAbilitiesEvent.OutputTuple,
      GrantAbilitiesEvent.OutputObject
    >;
    GrantAbilities: TypedContractEvent<
      GrantAbilitiesEvent.InputTuple,
      GrantAbilitiesEvent.OutputTuple,
      GrantAbilitiesEvent.OutputObject
    >;

    "RevokeAbilities(address,uint256)": TypedContractEvent<
      RevokeAbilitiesEvent.InputTuple,
      RevokeAbilitiesEvent.OutputTuple,
      RevokeAbilitiesEvent.OutputObject
    >;
    RevokeAbilities: TypedContractEvent<
      RevokeAbilitiesEvent.InputTuple,
      RevokeAbilitiesEvent.OutputTuple,
      RevokeAbilitiesEvent.OutputObject
    >;
  };
}
