/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeMessageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "messages"
      | "readMessage"
      | "sendMessage"
      | "receiverToMessageIds"
      | "setStoreAddress"
      | "owner"
      | "messageLengthByReceiver"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MessageSent"
      | "MessageRead"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readMessage",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, BigNumberish, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiverToMessageIds",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStoreAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageLengthByReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiverToMessageIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageLengthByReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    _receiver: AddressLike,
    _sender: AddressLike,
    _tokenId: BigNumberish,
    _messageId: BigNumberish
  ];
  export type OutputTuple = [
    _receiver: string,
    _sender: string,
    _tokenId: bigint,
    _messageId: bigint
  ];
  export interface OutputObject {
    _receiver: string;
    _sender: string;
    _tokenId: bigint;
    _messageId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReadEvent {
  export type InputTuple = [
    _receiver: AddressLike,
    _sender: AddressLike,
    _messageId: BigNumberish
  ];
  export type OutputTuple = [
    _receiver: string,
    _sender: string,
    _messageId: bigint
  ];
  export interface OutputObject {
    _receiver: string;
    _sender: string;
    _messageId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeMessage extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeMessage;
  waitForDeployment(): Promise<this>;

  interface: ArianeeMessageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  messages: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        imprint: string;
        sender: string;
        to: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  readMessage: TypedContractMethod<
    [_messageId: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [
      _messageId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _from: AddressLike,
      _reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  receiverToMessageIds: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  setStoreAddress: TypedContractMethod<
    [_storeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  messageLengthByReceiver: TypedContractMethod<
    [_receiver: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        imprint: string;
        sender: string;
        to: string;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "readMessage"
  ): TypedContractMethod<
    [_messageId: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [
      _messageId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _from: AddressLike,
      _reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiverToMessageIds"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setStoreAddress"
  ): TypedContractMethod<[_storeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "messageLengthByReceiver"
  ): TypedContractMethod<[_receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "MessageRead"
  ): TypedContractEvent<
    MessageReadEvent.InputTuple,
    MessageReadEvent.OutputTuple,
    MessageReadEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MessageSent(address,address,uint256,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "MessageRead(address,address,uint256)": TypedContractEvent<
      MessageReadEvent.InputTuple,
      MessageReadEvent.OutputTuple,
      MessageReadEvent.OutputObject
    >;
    MessageRead: TypedContractEvent<
      MessageReadEvent.InputTuple,
      MessageReadEvent.OutputTuple,
      MessageReadEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
