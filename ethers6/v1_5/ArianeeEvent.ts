/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeEventInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "idToPendingEvents"
      | "tokenEventsList"
      | "create"
      | "pendingEventsLength"
      | "unpause"
      | "updateDestroyRequest"
      | "accept"
      | "paused"
      | "setStoreAddress"
      | "getEvent"
      | "eventsLength"
      | "pause"
      | "owner"
      | "destroy"
      | "eventIdToToken"
      | "idToTokenEventIndex"
      | "validDestroyRequest"
      | "refuse"
      | "pendingEvents"
      | "updateEventDestroyDelay"
      | "transferOwnership"
      | "rewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventCreated"
      | "EventAccepted"
      | "EventRefused"
      | "EventDestroyed"
      | "DestroyRequestUpdated"
      | "EventDestroyDelayUpdated"
      | "Pause"
      | "Unpause"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "idToPendingEvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenEventsList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingEventsLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDestroyRequest",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "accept",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setStoreAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventsLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "destroy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventIdToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "idToTokenEventIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validDestroyRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refuse",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingEvents",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEventDestroyDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "idToPendingEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenEventsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingEventsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDestroyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accept", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eventIdToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idToTokenEventIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validDestroyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refuse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEventDestroyDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _eventId: BigNumberish,
    _imprint: BytesLike,
    _uri: string,
    _provider: AddressLike
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _eventId: bigint,
    _imprint: string,
    _uri: string,
    _provider: string
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _eventId: bigint;
    _imprint: string;
    _uri: string;
    _provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventAcceptedEvent {
  export type InputTuple = [_eventId: BigNumberish, _sender: AddressLike];
  export type OutputTuple = [_eventId: bigint, _sender: string];
  export interface OutputObject {
    _eventId: bigint;
    _sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventRefusedEvent {
  export type InputTuple = [_eventId: BigNumberish, _sender: AddressLike];
  export type OutputTuple = [_eventId: bigint, _sender: string];
  export interface OutputObject {
    _eventId: bigint;
    _sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventDestroyedEvent {
  export type InputTuple = [_eventId: BigNumberish];
  export type OutputTuple = [_eventId: bigint];
  export interface OutputObject {
    _eventId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DestroyRequestUpdatedEvent {
  export type InputTuple = [_eventId: BigNumberish, _active: boolean];
  export type OutputTuple = [_eventId: bigint, _active: boolean];
  export interface OutputObject {
    _eventId: bigint;
    _active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventDestroyDelayUpdatedEvent {
  export type InputTuple = [_newDelay: BigNumberish];
  export type OutputTuple = [_newDelay: bigint];
  export interface OutputObject {
    _newDelay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpauseEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeEvent extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeEvent;
  waitForDeployment(): Promise<this>;

  interface: ArianeeEventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  idToPendingEvents: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  tokenEventsList: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  create: TypedContractMethod<
    [
      _eventId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _reward: BigNumberish,
      _provider: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  pendingEventsLength: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDestroyRequest: TypedContractMethod<
    [_eventId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;

  accept: TypedContractMethod<
    [_eventId: BigNumberish, _sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  setStoreAddress: TypedContractMethod<
    [_storeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  eventsLength: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  destroy: TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  eventIdToToken: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  idToTokenEventIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  validDestroyRequest: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  refuse: TypedContractMethod<
    [_eventId: BigNumberish, _sender: AddressLike],
    [bigint],
    "nonpayable"
  >;

  pendingEvents: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  updateEventDestroyDelay: TypedContractMethod<
    [_newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  rewards: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "idToPendingEvents"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenEventsList"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [
      _eventId: BigNumberish,
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _uri: string,
      _reward: BigNumberish,
      _provider: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingEventsLength"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDestroyRequest"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accept"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _sender: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setStoreAddress"
  ): TypedContractMethod<[_storeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEvent"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [
      [string, string, string, bigint] & {
        uri: string;
        imprint: string;
        provider: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eventsLength"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "destroy"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eventIdToToken"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "idToTokenEventIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "validDestroyRequest"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refuse"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _sender: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingEvents"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateEventDestroyDelay"
  ): TypedContractMethod<[_newDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EventAccepted"
  ): TypedContractEvent<
    EventAcceptedEvent.InputTuple,
    EventAcceptedEvent.OutputTuple,
    EventAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "EventRefused"
  ): TypedContractEvent<
    EventRefusedEvent.InputTuple,
    EventRefusedEvent.OutputTuple,
    EventRefusedEvent.OutputObject
  >;
  getEvent(
    key: "EventDestroyed"
  ): TypedContractEvent<
    EventDestroyedEvent.InputTuple,
    EventDestroyedEvent.OutputTuple,
    EventDestroyedEvent.OutputObject
  >;
  getEvent(
    key: "DestroyRequestUpdated"
  ): TypedContractEvent<
    DestroyRequestUpdatedEvent.InputTuple,
    DestroyRequestUpdatedEvent.OutputTuple,
    DestroyRequestUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EventDestroyDelayUpdated"
  ): TypedContractEvent<
    EventDestroyDelayUpdatedEvent.InputTuple,
    EventDestroyDelayUpdatedEvent.OutputTuple,
    EventDestroyDelayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Pause"
  ): TypedContractEvent<
    PauseEvent.InputTuple,
    PauseEvent.OutputTuple,
    PauseEvent.OutputObject
  >;
  getEvent(
    key: "Unpause"
  ): TypedContractEvent<
    UnpauseEvent.InputTuple,
    UnpauseEvent.OutputTuple,
    UnpauseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,uint256,bytes32,string,address)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "EventAccepted(uint256,address)": TypedContractEvent<
      EventAcceptedEvent.InputTuple,
      EventAcceptedEvent.OutputTuple,
      EventAcceptedEvent.OutputObject
    >;
    EventAccepted: TypedContractEvent<
      EventAcceptedEvent.InputTuple,
      EventAcceptedEvent.OutputTuple,
      EventAcceptedEvent.OutputObject
    >;

    "EventRefused(uint256,address)": TypedContractEvent<
      EventRefusedEvent.InputTuple,
      EventRefusedEvent.OutputTuple,
      EventRefusedEvent.OutputObject
    >;
    EventRefused: TypedContractEvent<
      EventRefusedEvent.InputTuple,
      EventRefusedEvent.OutputTuple,
      EventRefusedEvent.OutputObject
    >;

    "EventDestroyed(uint256)": TypedContractEvent<
      EventDestroyedEvent.InputTuple,
      EventDestroyedEvent.OutputTuple,
      EventDestroyedEvent.OutputObject
    >;
    EventDestroyed: TypedContractEvent<
      EventDestroyedEvent.InputTuple,
      EventDestroyedEvent.OutputTuple,
      EventDestroyedEvent.OutputObject
    >;

    "DestroyRequestUpdated(uint256,bool)": TypedContractEvent<
      DestroyRequestUpdatedEvent.InputTuple,
      DestroyRequestUpdatedEvent.OutputTuple,
      DestroyRequestUpdatedEvent.OutputObject
    >;
    DestroyRequestUpdated: TypedContractEvent<
      DestroyRequestUpdatedEvent.InputTuple,
      DestroyRequestUpdatedEvent.OutputTuple,
      DestroyRequestUpdatedEvent.OutputObject
    >;

    "EventDestroyDelayUpdated(uint256)": TypedContractEvent<
      EventDestroyDelayUpdatedEvent.InputTuple,
      EventDestroyDelayUpdatedEvent.OutputTuple,
      EventDestroyDelayUpdatedEvent.OutputObject
    >;
    EventDestroyDelayUpdated: TypedContractEvent<
      EventDestroyDelayUpdatedEvent.InputTuple,
      EventDestroyDelayUpdatedEvent.OutputTuple,
      EventDestroyDelayUpdatedEvent.OutputObject
    >;

    "Pause()": TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;
    Pause: TypedContractEvent<
      PauseEvent.InputTuple,
      PauseEvent.OutputTuple,
      PauseEvent.OutputObject
    >;

    "Unpause()": TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;
    Unpause: TypedContractEvent<
      UnpauseEvent.InputTuple,
      UnpauseEvent.OutputTuple,
      UnpauseEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
