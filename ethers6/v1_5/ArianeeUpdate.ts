/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ArianeeUpdateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "readUpdateSmartAsset"
      | "getUpdate"
      | "updateSmartAsset"
      | "updateStoreAddress"
      | "owner"
      | "getUpdatedImprint"
      | "getImprint"
      | "storeAddress"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SmartAssetUpdated"
      | "StoreAddressUpdated"
      | "SmartAssetUpdateReaded"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "readUpdateSmartAsset",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSmartAsset",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStoreAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUpdatedImprint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImprint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "readUpdateSmartAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSmartAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedImprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getImprint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace SmartAssetUpdatedEvent {
  export type InputTuple = [_tokenId: BigNumberish, _imprint: BytesLike];
  export type OutputTuple = [_tokenId: bigint, _imprint: string];
  export interface OutputObject {
    _tokenId: bigint;
    _imprint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StoreAddressUpdatedEvent {
  export type InputTuple = [_newStoreAddress: AddressLike];
  export type OutputTuple = [_newStoreAddress: string];
  export interface OutputObject {
    _newStoreAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SmartAssetUpdateReadedEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ArianeeUpdate extends BaseContract {
  connect(runner?: ContractRunner | null): ArianeeUpdate;
  waitForDeployment(): Promise<this>;

  interface: ArianeeUpdateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  readUpdateSmartAsset: TypedContractMethod<
    [_tokenId: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getUpdate: TypedContractMethod<
    [_tokenId: BigNumberish],
    [[boolean, string, string, bigint]],
    "view"
  >;

  updateSmartAsset: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _issuer: AddressLike,
      _reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateStoreAddress: TypedContractMethod<
    [_newStoreAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  getUpdatedImprint: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  getImprint: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  storeAddress: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "readUpdateSmartAsset"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _from: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getUpdate"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [[boolean, string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateSmartAsset"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _imprint: BytesLike,
      _issuer: AddressLike,
      _reward: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStoreAddress"
  ): TypedContractMethod<[_newStoreAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUpdatedImprint"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getImprint"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "storeAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "SmartAssetUpdated"
  ): TypedContractEvent<
    SmartAssetUpdatedEvent.InputTuple,
    SmartAssetUpdatedEvent.OutputTuple,
    SmartAssetUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StoreAddressUpdated"
  ): TypedContractEvent<
    StoreAddressUpdatedEvent.InputTuple,
    StoreAddressUpdatedEvent.OutputTuple,
    StoreAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SmartAssetUpdateReaded"
  ): TypedContractEvent<
    SmartAssetUpdateReadedEvent.InputTuple,
    SmartAssetUpdateReadedEvent.OutputTuple,
    SmartAssetUpdateReadedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "SmartAssetUpdated(uint256,bytes32)": TypedContractEvent<
      SmartAssetUpdatedEvent.InputTuple,
      SmartAssetUpdatedEvent.OutputTuple,
      SmartAssetUpdatedEvent.OutputObject
    >;
    SmartAssetUpdated: TypedContractEvent<
      SmartAssetUpdatedEvent.InputTuple,
      SmartAssetUpdatedEvent.OutputTuple,
      SmartAssetUpdatedEvent.OutputObject
    >;

    "StoreAddressUpdated(address)": TypedContractEvent<
      StoreAddressUpdatedEvent.InputTuple,
      StoreAddressUpdatedEvent.OutputTuple,
      StoreAddressUpdatedEvent.OutputObject
    >;
    StoreAddressUpdated: TypedContractEvent<
      StoreAddressUpdatedEvent.InputTuple,
      StoreAddressUpdatedEvent.OutputTuple,
      StoreAddressUpdatedEvent.OutputObject
    >;

    "SmartAssetUpdateReaded(uint256)": TypedContractEvent<
      SmartAssetUpdateReadedEvent.InputTuple,
      SmartAssetUpdateReadedEvent.OutputTuple,
      SmartAssetUpdateReadedEvent.OutputObject
    >;
    SmartAssetUpdateReaded: TypedContractEvent<
      SmartAssetUpdateReadedEvent.InputTuple,
      SmartAssetUpdateReadedEvent.OutputTuple,
      SmartAssetUpdateReadedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
